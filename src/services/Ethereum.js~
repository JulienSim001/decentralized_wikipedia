import Web3 from 'web3'
import ContractInterface from '../build/contracts/Wikipedia.json'
import { connectEthereum } from '../store/reducers/root'

const connect = async dispatch => {
  if (window.ethereum) {
    window.web3 = new Web3(window.ethereum)
    try {
      const [account] = await window.ethereum.enable()
      const contract = new window.web3.eth.Contract(
        ContractInterface.abi,
        ContractInterface.networks['5777'].address,
        { from: account }
      )
      dispatch(connectEthereum({ account, contract }))
    } catch (error) {
      console.error(error)
    }
  } else {
    console.log('Not Dapp browser.')
  }
}

const addArticle = async (dispatch, getState) => {
  const { account, contract } = getState()
  /*if (contract) {
  	  alert("Sending an article")
  	  //await contract.methods.addArticle.sendTransaction("Test2", {from: account, gas: 100000})
      //await contract.methods.addArticle("Test3").send({from: account, gas : 100000})
      await contract.methods.addArticle("Test3").send({from: account})
      //await contract.methods.addArticle("Test4").send()
      contract.methods.getAllIds().call().then(alert)
  }*/
  
  if (contract && account) {
  	if (window.ethereum) {
	  //const value = window.web3.utils.toWei(valueContent.toString())
	  alert("In Ethereum")
	  const value = "Test3_eth"
	  const data = contract.methods.addArticle(value).encodeABI()
	  await window.web3.eth.sendTransaction({ from: account, value : 0, data : data })
	  //await contract.methods.addArticle("Test4").send({from : account, value : 0})
	} else {
	  alert("Outside Ethereum")
      await contract.methods.addArticle("Test4").send()
	}
  }
}

export { connect , addArticle }
