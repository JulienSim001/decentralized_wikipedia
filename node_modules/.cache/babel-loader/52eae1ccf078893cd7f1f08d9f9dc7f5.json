{"ast":null,"code":"import Web3 from 'web3';\nimport ContractInterface from '../build/contracts/Wikipedia.json';\nimport { connectEthereum } from '../store/reducers/root';\n\nconst connect = async dispatch => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n\n    try {\n      const [account] = await window.ethereum.enable();\n      const contract = new window.web3.eth.Contract(ContractInterface.abi, ContractInterface.networks['5777'].address, {\n        from: account\n      });\n      dispatch(connectEthereum({\n        account,\n        contract\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  } else {\n    console.log('Not Dapp browser.');\n  }\n};\n\nconst addArticle = async (dispatch, getState) => {\n  /*const { account, contract } = getState()\n  if (contract) {\n  \t  alert(\"Sending an article\")\n  \t  //await contract.methods.addArticle.sendTransaction(\"Test2\", {from: account, gas: 100000})\n      //await contract.methods.addArticle(\"Test3\").send({from: account, gas : 100000})\n      await contract.methods.addArticle(\"Test3\").send({from: account})\n      //await contract.methods.addArticle(\"Test4\").send()\n      contract.methods.getAllIds().call().then(alert)\n  }*/\n  if (contract && account) {\n    if (window.ethereum) {\n      const value = window.web3.utils.toWei(valueContent.toString());\n      await window.web3.eth.sendTransaction({\n        from: account,\n        to,\n        value\n      });\n    } else {\n      const value = valueContent;\n      await contract.methods.transfer(to, value).send();\n    }\n  }\n};\n\nexport { connect, addArticle };","map":{"version":3,"sources":["/home/sim/Repos/DecentralizedWiki/decentralized-wikipedia/src/services/Ethereum.js"],"names":["Web3","ContractInterface","connectEthereum","connect","dispatch","window","ethereum","web3","account","enable","contract","eth","Contract","abi","networks","address","from","error","console","log","addArticle","getState","value","utils","toWei","valueContent","toString","sendTransaction","to","methods","transfer","send"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,SAASC,eAAT,QAAgC,wBAAhC;;AAEA,MAAMC,OAAO,GAAG,MAAMC,QAAN,IAAkB;AAChC,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,IAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd;;AACA,QAAI;AACF,YAAM,CAACE,OAAD,IAAY,MAAMH,MAAM,CAACC,QAAP,CAAgBG,MAAhB,EAAxB;AACA,YAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACE,IAAP,CAAYI,GAAZ,CAAgBC,QAApB,CACfX,iBAAiB,CAACY,GADH,EAEfZ,iBAAiB,CAACa,QAAlB,CAA2B,MAA3B,EAAmCC,OAFpB,EAGf;AAAEC,QAAAA,IAAI,EAAER;AAAR,OAHe,CAAjB;AAKAJ,MAAAA,QAAQ,CAACF,eAAe,CAAC;AAAEM,QAAAA,OAAF;AAAWE,QAAAA;AAAX,OAAD,CAAhB,CAAR;AACD,KARD,CAQE,OAAOO,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAbD,MAaO;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,CAjBD;;AAmBA,MAAMC,UAAU,GAAG,OAAOhB,QAAP,EAAiBiB,QAAjB,KAA8B;AAC/C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE,MAAIX,QAAQ,IAAIF,OAAhB,EAAyB;AACxB,QAAIH,MAAM,CAACC,QAAX,EAAqB;AACrB,YAAMgB,KAAK,GAAGjB,MAAM,CAACE,IAAP,CAAYgB,KAAZ,CAAkBC,KAAlB,CAAwBC,YAAY,CAACC,QAAb,EAAxB,CAAd;AACD,YAAMrB,MAAM,CAACE,IAAP,CAAYI,GAAZ,CAAgBgB,eAAhB,CAAgC;AAAEX,QAAAA,IAAI,EAAER,OAAR;AAAiBoB,QAAAA,EAAjB;AAAqBN,QAAAA;AAArB,OAAhC,CAAN;AACE,KAHD,MAGO;AACR,YAAMA,KAAK,GAAGG,YAAd;AACA,YAAMf,QAAQ,CAACmB,OAAT,CAAiBC,QAAjB,CAA0BF,EAA1B,EAA8BN,KAA9B,EAAqCS,IAArC,EAAN;AACE;AACF;AACD,CApBD;;AAsBA,SAAS5B,OAAT,EAAmBiB,UAAnB","sourcesContent":["import Web3 from 'web3'\nimport ContractInterface from '../build/contracts/Wikipedia.json'\nimport { connectEthereum } from '../store/reducers/root'\n\nconst connect = async dispatch => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum)\n    try {\n      const [account] = await window.ethereum.enable()\n      const contract = new window.web3.eth.Contract(\n        ContractInterface.abi,\n        ContractInterface.networks['5777'].address,\n        { from: account }\n      )\n      dispatch(connectEthereum({ account, contract }))\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    console.log('Not Dapp browser.')\n  }\n}\n\nconst addArticle = async (dispatch, getState) => {\n  /*const { account, contract } = getState()\n  if (contract) {\n  \t  alert(\"Sending an article\")\n  \t  //await contract.methods.addArticle.sendTransaction(\"Test2\", {from: account, gas: 100000})\n      //await contract.methods.addArticle(\"Test3\").send({from: account, gas : 100000})\n      await contract.methods.addArticle(\"Test3\").send({from: account})\n      //await contract.methods.addArticle(\"Test4\").send()\n      contract.methods.getAllIds().call().then(alert)\n  }*/\n  \n  if (contract && account) {\n  \tif (window.ethereum) {\n\t  const value = window.web3.utils.toWei(valueContent.toString())\n\t\tawait window.web3.eth.sendTransaction({ from: account, to, value })\n\t  } else {\n\t\tconst value = valueContent\n\t\tawait contract.methods.transfer(to, value).send()\n\t  }\n\t}\n}\n\nexport { connect , addArticle }\n"]},"metadata":{},"sourceType":"module"}