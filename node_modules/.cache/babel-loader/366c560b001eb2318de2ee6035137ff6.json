{"ast":null,"code":"import _regeneratorRuntime from\"/home/sim/Repos/DecentralizedWiki/decentralized-wikipedia/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/home/sim/Repos/DecentralizedWiki/decentralized-wikipedia/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/home/sim/Repos/DecentralizedWiki/decentralized-wikipedia/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Web3 from'web3';import ContractInterface from'../build/contracts/Wikipedia.json';import{connectEthereum}from'../store/reducers/root';var connect=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _yield$window$ethereu,_yield$window$ethereu2,account,contract;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.ethereum){_context.next=17;break;}window.web3=new Web3(window.ethereum);_context.prev=2;_context.next=5;return window.ethereum.enable();case 5:_yield$window$ethereu=_context.sent;_yield$window$ethereu2=_slicedToArray(_yield$window$ethereu,1);account=_yield$window$ethereu2[0];contract=new window.web3.eth.Contract(ContractInterface.abi,ContractInterface.networks['5777'].address,{from:account});dispatch(connectEthereum({account:account,contract:contract}));_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);console.error(_context.t0);case 15:_context.next=18;break;case 17:console.log('Not Dapp browser.');case 18:case\"end\":return _context.stop();}}},_callee,null,[[2,12]]);}));return function connect(_x){return _ref.apply(this,arguments);};}();var addArticle=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var _getState,account,contract;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_getState=getState(),account=_getState.account,contract=_getState.contract;if(!contract){_context2.next=6;break;}alert(\"Sending an article\");_context2.next=5;return contract.methods.addArticle(1,\"test1\",{from:account,gas:2000}).send();case 5:contract.methods.getAllIds().call().then(alert);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function addArticle(_x2,_x3){return _ref2.apply(this,arguments);};}();export{connect,addArticle};","map":{"version":3,"sources":["/home/sim/Repos/DecentralizedWiki/decentralized-wikipedia/src/services/Ethereum.js"],"names":["Web3","ContractInterface","connectEthereum","connect","dispatch","window","ethereum","web3","enable","account","contract","eth","Contract","abi","networks","address","from","console","error","log","addArticle","getState","alert","methods","gas","send","getAllIds","call","then"],"mappings":"iaAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,mCAA9B,CACA,OAASC,eAAT,KAAgC,wBAAhC,CAEA,GAAMC,CAAAA,OAAO,0FAAG,iBAAMC,QAAN,wLACVC,MAAM,CAACC,QADG,0BAEZD,MAAM,CAACE,IAAP,CAAc,GAAIP,CAAAA,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd,CAFY,sCAIcD,CAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAJd,2GAIHC,OAJG,2BAKJC,QALI,CAKO,GAAIL,CAAAA,MAAM,CAACE,IAAP,CAAYI,GAAZ,CAAgBC,QAApB,CACfX,iBAAiB,CAACY,GADH,CAEfZ,iBAAiB,CAACa,QAAlB,CAA2B,MAA3B,EAAmCC,OAFpB,CAGf,CAAEC,IAAI,CAAEP,OAAR,CAHe,CALP,CAUVL,QAAQ,CAACF,eAAe,CAAC,CAAEO,OAAO,CAAPA,OAAF,CAAWC,QAAQ,CAARA,QAAX,CAAD,CAAhB,CAAR,CAVU,iFAYVO,OAAO,CAACC,KAAR,cAZU,uCAeZD,OAAO,CAACE,GAAR,CAAY,mBAAZ,EAfY,qEAAH,kBAAPhB,CAAAA,OAAO,4CAAb,CAmBA,GAAMiB,CAAAA,UAAU,2FAAG,kBAAOhB,QAAP,CAAiBiB,QAAjB,+JACaA,QAAQ,EADrB,CACTZ,OADS,WACTA,OADS,CACAC,QADA,WACAA,QADA,KAEbA,QAFa,0BAGdY,KAAK,CAAC,oBAAD,CAAL,CAHc,uBAIPZ,CAAAA,QAAQ,CAACa,OAAT,CAAiBH,UAAjB,CAA4B,CAA5B,CAA+B,OAA/B,CAAwC,CAACJ,IAAI,CAAEP,OAAP,CAAgBe,GAAG,CAAG,IAAtB,CAAxC,EAAqEC,IAArE,EAJO,QAKbf,QAAQ,CAACa,OAAT,CAAiBG,SAAjB,GAA6BC,IAA7B,GAAoCC,IAApC,CAAyCN,KAAzC,EALa,wDAAH,kBAAVF,CAAAA,UAAU,kDAAhB,CASA,OAASjB,OAAT,CAAmBiB,UAAnB","sourcesContent":["import Web3 from 'web3'\nimport ContractInterface from '../build/contracts/Wikipedia.json'\nimport { connectEthereum } from '../store/reducers/root'\n\nconst connect = async dispatch => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum)\n    try {\n      const [account] = await window.ethereum.enable()\n      const contract = new window.web3.eth.Contract(\n        ContractInterface.abi,\n        ContractInterface.networks['5777'].address,\n        { from: account }\n      )\n      dispatch(connectEthereum({ account, contract }))\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    console.log('Not Dapp browser.')\n  }\n}\n\nconst addArticle = async (dispatch, getState) => {\n  const { account, contract } = getState()\n  if (contract) {\n  \t  alert(\"Sending an article\")\n      await contract.methods.addArticle(1, \"test1\", {from: account, gas : 2000}).send()\n      contract.methods.getAllIds().call().then(alert)\n  }\n}\n\nexport { connect , addArticle }\n"]},"metadata":{},"sourceType":"module"}